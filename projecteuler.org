* Project Euler

** Solved problems

*** Problem 69: Totient maximum
Can be solved analytically. Otherwise, use a totient sieve.

*** Problem 70: Totient permutation
Use a totient sieve to solve this problem.

*** Problem 74: Digit factorial chains
This type of problem is solved using a cache, which keeps track of intermediate results. Without a cache, brute-forcing would be ridiculously expensive.


*** Problem 92: Square digit chains
This type of problem is best solved using a cache.b

** Techniques
*** Sieving
*** Dynamic programming
*** Discrete-time Markov Chains
Discrete-time Markov Chains can be easily solved using dynamic programming. The difficult part is to define a state representation whose transition probabilities can be defined relatively efficiently.

**** DONE Problem 151: Paper sheets of standard sizes: an expected-value problem
***** State representation
X(t) = State in binary representation at time t
P(X(0) = [1, 0, 0, 0, 0]) = 1
P(X(1) = [0, 1, 1, 1, 1]) = 1
P(X(2) = [0, 0, 2, 2, 2]) = 1/4
P(X(2) = [0, 1, 0, 2, 2]) = 1/4
P(X(2) = [0, 1, 1, 0, 1]) = 1/4
P(X(2) = [0, 1, 1, 1, 0]) = 1/4

P(X(t+1) = x | X(t) = y) = q

And so on.

***** State transitions
P(X(t+1) = x | X(t) = y) = q

Given a state, what are the next possible states? What are the probabilities? The next states can be computed by taking an sheet and cutting it in half until we have obtained an A5 sheet. The probability is equal to the total number of the chosen sheet divided the total number of sheets.

***** Example
Try an example of papers with sizes A3, A4 and A5.

***** Solution
Use the state representation. Calculate P(X(t) = x) for all possible x and t = 1, 2, ..., 16.

At t = 8, 12 and 14 we can expect to find a state with only 1 sheet (respectively a single A2, A3 or A4).

**** TODO Problem 213: Flea Circus
**** DONE Problem 227: The Chase
***** State representation
X(t) = The difference between player $i$ and $j$ at time $t$
***** Transition probabilities
Players i and j can perform 4 different move combinations:
- Both players stand still, so the difference remains the same
- Both players move into the same direction, so the difference remains the same
- Both players move into opposite directions, so the difference will be +- 2
- One player will move while the other will remain still, so the difference will be +- 1

For x = 2, ..., n-2:

P(X(t+1) = x) = P(X(t) = x-2) * 1/36 + P(X(t) = x-1) * 8/16 + P(X(t) = x) * 18/16 + P(X(t) = x+1) * 8/16 + P(X(t) = x+2) * 1/36

However, for x = 0, 1, n-1, n, we have to take into account the fact that we are working on a 'circle'. That is, from state 49 and moving into the same opposite will yield 49 + 2 = 51; but a difference of 51 is never possible in a game of 100 players. Instead, the difference will "rotate" around 50, so it will become 49 -> 50 -> 49.
***** Example
Try an example with 4 players and thus N = 2.

**** DONE Problem 280: Ant and seeds
***** State representation
For each state, we need to consider the following:
- The current position (i, j)
- The state of the lower row e.g. (1, 1, 1, 1, 1) if all seeds are still there
- The state of the upper row e.g. (0, 0, 0, 0, 0) if none of the seeds have been moved
- Whether or not the ant is currently carrying a seed or not

This state can be modeled as a 5-tuple (i, j, lower, upper, carrying). The number of possibilities of states is 5*5*32*32*2 = 51200; which can be easily computed.

***** Transition probabilities
The number of transitions for each state is limited; it is namely bounded by the moving option for each ant. An ant can only move up, down, left or right, and only if those moves are legible. So for each state, there are at most 4 different states to transition to. Calculating those transitions and its probabilities is easy (see Problem 213).

The more tricky part is how to take the lower, upper and carrying variables. We shall see that it only requires two conditions:
1. If the ant is currently carrying a seed, then it will only drop its seed if it moves to a new tile in the upper row that does not contain a seed.
2. If the ant is currently not carrying a seed, then it will only pick up a seed if it moves to a new tile in the lower row that does contain a seed.

If none of the conditions hold, then lower, upper and carrying all do not change.

***** Example
I won't include an example here because the instance size is fairly small.



**** [#A] Problem 285: Pythagorean odds

**** TODO Problem 323: Bitwise-OR operations on random integers

**** TODO Problem 329: Prime Frog
**** TODO Problem 493: Under The Rainbow
** Type of problems
