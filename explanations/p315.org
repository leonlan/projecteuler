* Introduction
I really liked to read this problem description. It's a bit long, but the problem is well-defined and I believe it's a case of unnecessary optimization (will it really save a lot of energy?), which I always like to study.  Digital root sums are also a very fun concept, so all-in-all I'm fond of this problem. Reading through the problem, we can break it up in three parts:
- Preliminaries :: Basic functions such as creating the digital root sum sequences of numbers.
- Sam's clock :: Calculating the transition costs for Sam's clock
- Max's clock :: Calculating the transition costs for Max's clock

* Preliminaries
** Digital root sums
This problem statement actually does not explain what a digital root sum is, so here is a brief definition. A /digital room sum sequence/ of $n$ is a sequence that is obtained by summing over the digits over a number and iterating until the sum is less than 10. For more information, see [[https://en.wikipedia.org/wiki/Digital_root][Wikipedia]].


** Costs for transitions
The $i$-th index in the following list represents  the transition costs for turning on a digit $i$.
#+BEGIN_SRC python
C = [6, 2, 5, 5, 4, 5, 6, 4, 7, 6]
#+END_SRC

Max's clock is a bit more optimized. Transitioning a digit from $d$ to $b$ includes both turning off and on step, summarized in the dictionary below:
#+BEGIN_SRC python
reduced_costs = {
    0: {0: 0, 1: 4, 2: 3, 3: 3, 4: 4, 5: 3, 6: 2, 7: 2, 8: 1, 9: 2},
    1: {0: 4, 1: 0, 2: 5, 3: 3, 4: 2, 5: 5, 6: 6, 7: 2, 8: 5, 9: 4},
    2: {0: 3, 1: 5, 2: 0, 3: 2, 4: 5, 5: 4, 6: 3, 7: 5, 8: 2, 9: 3},
    3: {0: 3, 1: 3, 2: 2, 3: 0, 4: 3, 5: 2, 6: 3, 7: 3, 8: 2, 9: 1},
    4: {0: 4, 1: 2, 2: 5, 3: 3, 4: 0, 5: 3, 6: 4, 7: 2, 8: 3, 9: 2},
    5: {0: 3, 1: 5, 2: 4, 3: 2, 4: 3, 5: 0, 6: 1, 7: 3, 8: 2, 9: 1},
    6: {0: 2, 1: 6, 2: 3, 3: 3, 4: 4, 5: 1, 6: 0, 7: 4, 8: 1, 9: 2},
    7: {0: 2, 1: 2, 2: 5, 3: 3, 4: 2, 5: 3, 6: 4, 7: 0, 8: 3, 9: 2},
    8: {0: 1, 1: 5, 2: 2, 3: 2, 4: 3, 5: 2, 6: 1, 7: 3, 8: 0, 9: 1},
    9: {0: 2, 1: 4, 2: 3, 3: 1, 4: 2, 5: 1, 6: 2, 7: 2, 8: 1, 9: 0},
}
#+END_SRC

It's really easy to make a mistake here..

* Sam's clock
Calculating Sam's clock's transition costs is straight-forward. Given a number $n$, we simply need to cycle through its digital root sequence and calculate its transition costs.


* Max's clock
Max's clock is a bit more complicated. There are three steps in total:
- Turning on the initial numbers :: This is calculated using the ~normal_costs~ array.
- Transitioning between numbers :: Best illustrated using an example. When we go from 137 to 11 (just as in the example), we need to map each digit to the next one. Here, 3 is mapped to 1 and 7 is mapped to 1, but 1 is mapped to nothing. If the digit is mapped to a number, than we use ~reduced_costs~, otherwise we simply 'turn off' the number and use ~normal_costs~.
- Turning off the final numbers :: The last step is to just turn off the last digits using ~normal_costs~.

* Tags :3:
